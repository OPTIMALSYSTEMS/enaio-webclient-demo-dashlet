{"mappings":"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","sources":["src/communicationLibrary.js","src/libraryWebClient.js","src/libraryRichClient.js"],"sourcesContent":["const version = '2.0.1-rc2';\nimport * as libWebClient from \"./libraryWebClient.js\";\r\nimport * as libRichClient from \"./libraryRichClient.js\";\r\n\r\n/**\r\n * Registers an onInit callback which is executed once the dashlet is initialized.\r\n * \r\n * @param {Function} onInitCallback The callback\r\n * @param {string} trustedOrigin origin which is allowed to send and receive messages. Should be the webclient uri.\r\n * Use \"*\" to allow every target origin. Example: https://enaio.company-name.de.\r\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\r\n */\r\nfunction registerOnInitCallback(onInitCallback, trustedOrigin = \"*\") {\r\n\tconsole.log(`Current Communication library version number: ${version}`);\r\n\r\n\tif (window.osClient) {\r\n\t\tlibRichClient.registerOnInitCallback(onInitCallback);\r\n\t} else {\r\n\t\tlibWebClient.registerOnInitCallback(onInitCallback, trustedOrigin);\r\n\t}\r\n}\r\n\r\n/**\r\n * Registers an onUpdate callback which is executed if something changes in the client.\r\n * \r\n * @param {Function} onUpdateCallback The callback\r\n * @param {string} trustedOrigin origin which is allowed to send and receive messages. Should be the webclient uri.\r\n * Use \"*\" to allow every target origin. Example: https://enaio.company-name.de.\r\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\r\n */\r\nfunction registerOnUpdateCallback(onUpdateCallback, trustedOrigin = \"*\") {\r\n\tif (window.osClient) {\r\n\t\tlibRichClient.registerOnUpdateCallback(onUpdateCallback);\r\n\t} else {\r\n\t\tlibWebClient.registerOnUpdateCallback(onUpdateCallback, trustedOrigin);\r\n\t}\r\n}\r\n\r\n/**\r\n * Opens the index data mask for the currently selected osId.\r\n * \r\n * @param {boolean} inNewTab indicates whether the index data mask should be opened in a new tab. Default is (false).\r\n * @param {string} mode should the index data view be opened in read-only mode (view) or in edit mode (edit). Default is (edit) mode.\r\n * @param {string} objectId the osId of the DMS object.\r\n * @param {string} objectTypeId the objectTypeId of the DMS object. This increases the performance when opening the index data view.\r\n * @returns {boolean} true if the objectId and objectTypeId are valid and the opening was successful. Otherwise, false.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/openIndexData\r\n */\r\nasync function openIndexData(inNewTab, mode, objectId, objectTypeId = undefined) {\r\n\tif (isModalDialog()) {\r\n\t\tthrow \"Not implemented for modal dialog\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"openIndexData\", [inNewTab, mode, objectId, objectTypeId]]);\r\n}\r\n\r\n/**\r\n * Opens the location in the current browser tab (or a location selection in the case of several possible locations) for the DMS object transferred as a parameter.\r\n * \r\n * @param {boolean} inNewTab indicates whether the hit list should be opened in a new tab.\r\n * @param {string} objectId the osId of the DMS object.\r\n * @param {string} [objectTypeId] the objectTypeId of the DMS object. This increases the performance when opening the location.\r\n * @param {string} [parentId] the osId of the parent DMS object to open a specific location if the object has multiple locations.\r\n * @param {string} [parentTypeId] the objectTypeId of the parent DMS object to open a specific location if the object has multiple locations.\r\n * @returns {Promise<void>} The method has no return value. In the event of an error, an error is triggered. This can be caught with a try-catch-block or error handler for the method.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/openLocation\r\n */\r\nasync function openLocation(inNewTab, objectId, objectTypeId = undefined, parentId = undefined, parentTypeId = undefined) {\r\n\tif (isModalDialog()) {\r\n\t\tthrow \"Not implemented for modal dialog\";\r\n\t}\r\n\r\n\tawait sendClientMessage([\"openLocation\", [inNewTab, objectId, objectTypeId, parentId, parentTypeId]]);\r\n}\r\n\r\n/**\r\n * Query the currently selected objects.\r\n * Depending on whether you call getSelectedObjects or the enaio® RichClient compatibility method,\r\n * you will get a different result. In the former, a JavaScript array with objects consisting of objectId and\r\n * objectTypeId of the selected DMS objects. With the compatibility method, a character sect that is separated\r\n * by a semicolon and returns a tuple from objectId and objectTypeId.\r\n * \r\n * @returns {Promise<string>} Semicolon separated string of tuples with objectId and objectTypeId.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/getSelectedObjects\r\n */\r\nasync function getSelectedObjects() {\r\n\tif (isModalDialog()) {\r\n\t\tthrow \"Not implemented for modal dialog\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"getSelectedObjects\", []]);\r\n}\r\n\r\n/**\r\n * Update/refresh one or more objects in an open hit list.\r\n * \r\n * @param {string[]} osIds of the DMS objects.\r\n * @return The method has no return value. In the event of an error, an error is triggered. This can be caught with a try-catch-block or error handler for the method.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/refreshHitListObjects\r\n */\r\nasync function refreshHitListObjects(osIds) {\r\n\tif (isModalDialog()) {\r\n\t\tthrow \"Not implemented for modal dialog\";\r\n\t}\r\n\r\n\tawait sendClientMessage([\"refreshHitListObjects\", [osIds]]);\r\n}\r\n\r\n/**\r\n * Display a mixed hit list with freely selected objects.\r\n * \r\n * @param {Array<{objectId: string, objectTypeId: string}>} objects selected objects\r\n * @param {boolean} [inNewTab] indicates whether the hit list should be opened in a new tab\r\n * @param {string} [title] title of the hit list\r\n * @param {string} [subTitle] subtitle of the hit list\r\n * @param {boolean} [executeSingleHitAction] specifies whether to execute the default action when there is a single hit\r\n * @return The method has no return value. In the event of an error, an error is triggered. This can be caught with a try-catch-block or error handler for the method.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/openHitListByIds\r\n */\r\nasync function openHitListByIds(objects, inNewTab = false, title = \"\", subTitle = \"\", executeSingleHitAction = false) {\r\n\tif (isModalDialog()) {\r\n\t\tthrow \"Not implemented for modal dialog\";\r\n\t}\r\n\r\n\tawait sendClientMessage([\"openHitListByIds\", {\r\n\t\tobjects,\r\n\t\tinNewTab,\r\n\t\ttitle,\r\n\t\tdescription: subTitle,\r\n\t\texecuteSingleHitAction\r\n\t}]);\r\n}\r\n\r\n/**\r\n * Only available for modal dialogs.\r\n * Return the value of a field given by its internal name. The return value depends on the field type.\r\n * See documentation for more information regarding return value.\r\n *\r\n * @param json A json object with internalName\r\n * @return {Promise<string|Array<Array<string>>>}\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/getFieldValueByInternal\r\n * @returns The answer of the client.\r\n */\r\nasync function getFieldValueByInternal(json) {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"getFieldValueByInternal\", [jsonObjectToString(json)]]);\r\n}\r\n\r\n/**\r\n * Fetches the value of a specific workflow variable by its name. This function is only available for modal dialogs.\r\n * The return value of the function depends on the type of the workflow variable being queried.\r\n *\r\n * @param {object} json - A JSON object containing the `name` of the workflow variable.\r\n * @return {Promise<string|Array<Array<string>>>} - A promise that resolves to the value of the workflow variable. The type of the return value can be a string or an array of arrays of strings, depending on the variable's type.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/getWorkflowVariableByName - For more information regarding the return value based on the field type.\r\n * @throws {string} - Throws an error message if the function is invoked outside of a modal dialog context, as it is not implemented for dashlets.\r\n */\r\nasync function getWorkflowVariableByName(json) {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"getWorkflowVariableByName\", [jsonObjectToString(json)]]);\r\n}\r\n\r\n/**\r\n * Only available for modal dialogs.\r\n * Set the value of a field given by its internal name in the open index data mask behind the modal dialog.\r\n * The current value of the index data mask field is completely replaced by the new value.\r\n *\r\n * @param json A json object with internalName and value.\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/setFieldValueByInternal\r\n * @returns The answer of the client.\r\n */\r\nasync function setFieldValueByInternal(json) {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"setFieldValueByInternal\", [jsonObjectToString(json)]]);\r\n}\r\n\r\n/**\r\n * Only available for modal dialogs.\r\n * Sets a workflow variable by its name.\r\n * The current value of the workflow variable is completely replaced by the new value.\r\n *\r\n * @param json A json object with the variable name and value.\r\n * @throws {string} If the function is used outside of a modal dialog.\r\n * @returns The answer of the client.\r\n * @async\r\n */\r\nasync function setWorkflowVariableByName(json) {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"setWorkflowVariableByName\", [jsonObjectToString(json)]]);\r\n}\r\n\r\n/**\r\n * Return the environment values from the client.\r\n *\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/getEnvironment\r\n * @returns The environment values from the client.\r\n */\r\nasync function getEnvironment() {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"getEnvironment\", []]);\r\n}\r\n\r\n/**\r\n * This function is only available for modal dialogs. It sets the caption of the dialog to the provided value.\r\n *\r\n * @param {string} newDialogCaption - The caption to be set for the modal dialog. Defaults to an empty string if no value is provided.\r\n * @throws {string} Throws a string error message if the function is used outside of a modal dialog context.\r\n * @remarks The caption is set as an array for webclient compatibility. The rich client only accepts a string.\r\n */\r\nfunction setDialogCaption(newDialogCaption = \"\") {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"setDialogCaption\", [newDialogCaption]]);\r\n}\r\n\r\n/**\r\n * Cancel the modal dialog\r\n *\r\n * @param buttonScriptReturnValue The numeric value which should be sent to the button script\r\n */\r\nasync function closeModalDialog(buttonScriptReturnValue) {\r\n\tif (!isModalDialog()) {\r\n\t\tthrow \"Not implemented for dashlets\";\r\n\t}\r\n\r\n\treturn sendClientMessage([\"closeModalDialog\", [buttonScriptReturnValue]]);\r\n}\r\n\r\n/**\r\n * Send a command either to the web client or rich client and return the response.\r\n * \r\n * @private\r\n * @param {Object[]} payload The input parameter for the command\r\n * @returns The answer of the client\r\n */\r\nasync function sendClientMessage(payload) {\r\n\ttry {\r\n\t\tif (window.osClient) {\r\n\t\t\treturn libRichClient.sendToRichClient(payload);\r\n\t\t}\r\n\r\n\t\treturn libWebClient.sendWebclientMessage(payload);\r\n\t} catch (error) {\r\n\t\tconsole.log(`dashlet says: error caught in ${payload[0]}`, error);\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if the json object is a string. If not the json object is stringify and\r\n * returned. Otherwise, it is returned as handed in.\r\n *\r\n * @private\r\n * @returns {string} The stringify json object if it is not already a string.\r\n */\r\nfunction jsonObjectToString(jsonObject) {\r\n\tif (!(jsonObject instanceof String) && typeof jsonObject !== \"string\") {\r\n\t\tif (typeof jsonObject.value === \"object\" && !Array.isArray(jsonObject.value)) {\r\n\t\t\tjsonObject.value = JSON.stringify(jsonObject.value);\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify(jsonObject);\r\n\t}\r\n\r\n\treturn jsonObject;\r\n}\r\n\r\n/**\r\n * Return true if we are running inside a modal dialog. If we are running inside a dashlet the return is false.\r\n *\r\n * @private\r\n * @returns true if modal dialog, Otherwise false\r\n */\r\nfunction isModalDialog() {\r\n\tif (window.osClient) {\r\n\t\treturn libRichClient.isModalDialog();\r\n\t}\r\n\r\n\treturn libWebClient.isModalDialog();\r\n}\r\n\r\n// This will store the value for the onCanCancel behavior.\r\n// It's initialized to a default value to ensure it's always callable.\r\nlet onCanCancelValue = 1;\r\n\r\n/**\r\n * Registers the callback for the ESC key event.\r\n *\r\n * @param {Function} valueFunction - A function that returns the current value for the callback.\r\n */\r\nfunction registerOnCanCancelCallback(valueFunction) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// Delay is necessary to ensure the availability of the function.\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (!isModalDialog()) {\r\n\t\t\t\treject(\"Not implemented for dashlets\");\r\n\t\t\t} else {\r\n\t\t\t\t// We assign the function passed from main.js to onCanCancelValue.\r\n\t\t\t\t// This allows the function to be updated dynamically from main.js.\r\n\t\t\t\tonCanCancelValue = valueFunction;\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\t});\r\n}\r\n\r\n// Event listener for the ESC key.\r\nwindow.addEventListener('keydown', function (event) {\r\n\t// Check if the ESC key was pressed, and the modal dialog is active.\r\n\tif (event.key === \"Escape\" && !window.osClient && isModalDialog()) {\r\n\t\t// Retrieve the current onCanCancelValue by calling the function.\r\n\t\tconst currentValue = typeof onCanCancelValue == 'function' ? onCanCancelValue() : onCanCancelValue;\r\n\t\t// If the value is not 2, we close the modal dialog.\r\n\t\tif (currentValue !== 2) {\r\n\t\t\tcloseModalDialog(currentValue);\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"ESC key event is disabled.\");\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Export functions to be used in other JavaScript files.\r\n// Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\r\n\r\nexport {\r\n\t// Event Callbacks\r\n\tregisterOnInitCallback,\r\n\tregisterOnUpdateCallback,\r\n\tregisterOnCanCancelCallback,\r\n\r\n\t// Methods Dashlets\r\n\topenIndexData,\r\n\topenLocation,\r\n\tgetSelectedObjects,\r\n\trefreshHitListObjects,\r\n\topenHitListByIds,\r\n\tcloseModalDialog,\r\n\r\n\t// Methods modal dialogs\r\n\tgetFieldValueByInternal,\r\n\tsetFieldValueByInternal,\r\n\tgetEnvironment,\r\n\tsetDialogCaption,\r\n\r\n\r\n\t// Methods for Workflows\r\n\tgetWorkflowVariableByName,\r\n\tsetWorkflowVariableByName,\r\n\r\n\t// export for unit tests\r\n\tisModalDialog\r\n};\r\n\r\nconst CommunicationLibrary = {\r\n\t// Event Callbacks\r\n\tregisterOnInitCallback,\r\n\tregisterOnUpdateCallback,\r\n\tregisterOnCanCancelCallback,\r\n\r\n\t// Methods Dashlets\r\n\topenIndexData,\r\n\topenLocation,\r\n\tgetSelectedObjects,\r\n\trefreshHitListObjects,\r\n\topenHitListByIds,\r\n\tcloseModalDialog,\r\n\r\n\t// Methods modal dialogs\r\n\tgetFieldValueByInternal,\r\n\tsetFieldValueByInternal,\r\n\tgetEnvironment,\r\n\tsetDialogCaption,\r\n\r\n\t// Methods for Workflows\r\n\tgetWorkflowVariableByName,\r\n\r\n\t// export for unit tests\r\n\tisModalDialog\r\n}\r\n\r\nexport default CommunicationLibrary;","/**\r\n * This library manage the communication between dashlet and web client.\r\n */\r\nconst msgQueue = {};\r\nconst alertQueue = [];\r\n\r\nlet modalDialog = false;\r\n\r\nlet webclientOrigin;\r\nlet trustedOrigin;\r\n\r\nlet onInitCallback = () => {};\r\nlet onUpdateCallback = () => {};\r\nlet onUpdateCallbackRegistered = false;\r\n\r\n/**\r\n * Registers an onInit callback which is executed once the dashlet is initialized.\r\n *\r\n * @param {Function} callback\r\n * @param {string} allowedOrigin origin which is allowed to send and receive messages. Should be the webclient uri.\r\n * Use \"*\" to allow every target origin. Example: https://enaio.company-name.de.\r\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\r\n */\r\nfunction registerOnInitCallback(callback, allowedOrigin) {\r\n    onInitCallback = callback;\r\n    trustedOrigin = allowedOrigin;\r\n}\r\n\r\n/**\r\n * Registers an onUpdate callback which is executed if something changes in the client.\r\n *\r\n * @param {Function} callback The callback\r\n * @param {string} allowedOrigin origin which is allowed to send and receive messages. Should be the webclient uri.\r\n * Use \"*\" to allow every target origin. Example: https://enaio.company-name.de.\r\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\r\n */\r\nfunction registerOnUpdateCallback(callback, allowedOrigin) {\r\n\tif (modalDialog) {\r\n\t\tthrow \"Modal dialogs do not trigger a update event. Please do not register one.\";\r\n\t} else {\r\n\t\tonUpdateCallbackRegistered = true;\r\n\t\tonUpdateCallback = callback;\r\n\t\ttrustedOrigin = allowedOrigin;\r\n\t}\r\n}\r\n\r\n// Listen to \"message\" type events from web client.\r\nwindow.addEventListener(\"message\", handlePostMessage, false);\r\n\r\n/**\r\n * A function responsible for processing all incoming \"messages\" from the enaio® webclient.\r\n *\r\n * @param event the object passed from the other Window i.e. enaio® webclient.\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#the_dispatched_event\r\n */\r\nfunction handlePostMessage(event) {\r\n    // Todo: Why global?\r\n    webclientOrigin = event.origin;\r\n\r\n    /* Ensure \"messages\" come from a trusted source i.e. your own enaio® hosted domain.\r\n       Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#security_concerns\r\n\r\n       \"srcOrigin\" is the domain URL where enaio® webclient is served. Example: https://enaio.company-name.de\r\n        Please note, in enaio desktop client, \"srcOrigin\" is represented as \"file://\" string.\r\n    */\r\n    if (trustedOrigin !== null && trustedOrigin !== undefined && trustedOrigin.length > 0 && trustedOrigin !== \"*\") {\r\n        // client uses electron webclient so override origin\r\n        if (\"file://\" === webclientOrigin) {\r\n            trustedOrigin = \"file://\";\r\n        }\r\n\r\n        const safeOrigin = trustedOrigin === webclientOrigin;\r\n\t\t\r\n        if (safeOrigin === false) {\r\n            console.log(`webclientOrigin ${webclientOrigin} is different from srcOrigin ${trustedOrigin}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // \"handleWebclientMessage\" is a handler function which further processes all incoming \"messages\" from enaio® webclient (see implementation details in the communication-library.js file).\r\n    // Extract the \"type\" and \"data\" properties for further processing.\r\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\n    const {type, data} = handleWebclientMessage(event.data);\r\n    delete data.dapi; // abstraction layer is taking care of it.\r\n\r\n    if (type === \"onInit\") {\r\n\t\tdetectDashletModalDialog(data);\r\n        // Do initialization work here.\r\n        onInitCallback(data);\r\n    } else if (type === \"onUpdate\") {\r\n        // React to osid selection changes here.\r\n        onUpdateCallback(data);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Detect the kind of script which is running. There are normal dashlets and\r\n * modal dialogs. They differ in specific way, but we want to make it as smooth\r\n * to the developer as possible.\r\n *\r\n * @param data The init data structure from enaio® webclient.\r\n */\r\nfunction detectDashletModalDialog(data) {\r\n\tif (data.selectedEntry) {\r\n\t\tmodalDialog = true;\r\n\t\t\r\n\t\tif (onUpdateCallbackRegistered) {\r\n\t\t\t// Unregister onUpdateCallback because it is not available and write a message to console.\r\n\t\t\tconsole.error(\"Modal dialogs do not trigger a update event. Please do not register one.\");\r\n\t\t\tonUpdateCallbackRegistered = false;\r\n\t\t\tonUpdateCallback = () => {}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * A function that handles \"messages\" coming from the enaio® webclient.\r\n *\r\n * @param payload an object with { type, data } as payload.\r\n * @returns an object with the same shape as the input payload i.e. { type, data }\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/5.2+Kommunikation\r\n */\r\nfunction handleWebclientMessage(payload) {\r\n    if (payload.msgId && msgQueue[payload.msgId]) {\r\n        if (payload.data.error !== undefined) {\r\n            msgQueue[payload.msgId].reject(payload.data.error);\r\n        } else if (payload.data.result !== undefined) {\r\n            msgQueue[payload.msgId].resolve(payload.data.result);\r\n        } else {\r\n            msgQueue[payload.msgId].resolve();\r\n        }\r\n\r\n        if (alertQueue.includes(payload.msgId)) {\r\n            // display payload info\r\n\t\t\talertQueue.splice(alertQueue.indexOf(payload.msgId), 1);\r\n            alert(JSON.stringify(payload.data.result));\r\n        }\r\n\r\n        delete msgQueue[payload.msgId];\r\n    }\r\n\r\n    return payload;\r\n}\r\n\r\n/**\r\n * A function responsible for sending \"messages\" to the enaio® webclient.\r\n * @param payload an array with [\"method-name\", [arguments]] as payload. Ref: https://help.optimal-systems.com/enaio_develop/display/WEB/5.4+Dashlet-Methoden\r\n * @param triggerAlert Boolean. If true, a browser alert (with payload results) will be displayed in the enaio® webclient.\r\n * @returns a JavaScript Promise. Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n * @link https://help.optimal-systems.com/enaio_develop/display/WEB/5.2+Kommunikation\r\n */\r\nasync function sendWebclientMessage(payload, triggerAlert = false) {\r\n    const msgId = Math.random().toString(36).substr(2, 8);\r\n    payload.push({msgId});\r\n\r\n    if (triggerAlert) {\r\n        alertQueue.push(msgId);\r\n    }\r\n\r\n    let _resolve, _reject;\r\n    const promise = new Promise((resolve, reject) => {\r\n        _resolve = resolve;\r\n        _reject = reject;\r\n    });\r\n\r\n    msgQueue[msgId] = {resolve: _resolve, reject: _reject};\r\n\r\n    // \"window\" is the Dashlet's JavaScript Window object. Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window\r\n    // \"parent\" is the enaio® webclient Window object.\r\n    // postMessage\" is the browser API used to communicate between enaio® webclient and the Dashlet. Ref: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\r\n    if (trustedOrigin !== null && trustedOrigin !== undefined && trustedOrigin.length > 0) {\r\n        window.parent.postMessage(payload, trustedOrigin);\r\n    } else {\r\n        window.parent.postMessage(payload, \"*\");\r\n    }\r\n\t\r\n    return promise;\r\n}\r\n\r\n/**\r\n * Return true if we are running inside a modal dialog. If we are running inside a dashlet the return is false.\r\n */\r\nfunction isModalDialog() {\r\n\treturn modalDialog;\r\n}\r\n\r\n/**\r\n * This function is only for the unit-tests to reset the webclient library to its original state\r\n */\r\nfunction reset() {\r\n    modalDialog = false;\r\n    onInitCallback = () => {};\r\n    onUpdateCallback = () => {};\r\n    onUpdateCallbackRegistered = false;\r\n}\r\n\r\n// Export functions to be used in other JavaScript files.\r\n// Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\r\nexport {\r\n\tregisterOnInitCallback, \r\n\tregisterOnUpdateCallback, \r\n\tsendWebclientMessage,\r\n\tisModalDialog,\r\n\r\n    // Only for Unit-Tests\r\n    handlePostMessage,\r\n    reset\r\n};\r\n","/**\r\n * This library manage the communication between dashlet and rich client.\r\n */\r\nlet onInitCallback = null;\r\nlet onUpdateCallback = null;\r\nlet dashletCache = null; // static data from rich client only one time for a dashlet\r\nlet modalDialog = false;\r\n\r\n/**\r\n * Registers an onInit callback which is executed once the dashlet is initialized.\r\n *\r\n * @param {Function} callback\r\n */\r\nfunction registerOnInitCallback(callback) {\r\n    onInitCallback = callback;\r\n}\r\n\r\n/**\r\n * Registers an onUpdate callback which is executed if something changes in the client.\r\n *\r\n * @param {Function} callback The callback\r\n */\r\nfunction registerOnUpdateCallback(callback) {\r\n\tif (modalDialog) {\r\n\t\tthrow \"Modal dialogs does not trigger a update event. Please do not register one.\";\r\n\t}\r\n\t\r\n    onUpdateCallback = callback;\r\n}\r\n\r\n/**\r\n * Providing only necessary information for this rich client dashlet example.\r\n * We are converting it to be like the webclient structure.\r\n *\r\n * @param {Object} data initialize data from the rich client.\r\n * @private\r\n */\r\nasync function internalOnInitUpdate(data) {\r\n\tif (data.selectedEntry) {\r\n\t\tif (onUpdateCallback != null) {\r\n\t\t\t// Unregister onUpdateCallback because it is not available and write a message to console.\r\n\t\t\tconsole.error(\"Modal dialogs does not trigger a update event. Please do not register one.\");\r\n\t\t\tonUpdateCallback = null;\r\n\t\t}\r\n\t\t\r\n\t\tmodalDialog = true;\r\n\t\tinternalOnInitModalDialog(data);\r\n\t} else {\r\n\t\tawait internalOnInitUpdateDashlet(data);\r\n\t}\r\n}\r\n\r\n/**\r\n * Method which is called if the rich client send the initialize event for a dashlet.\r\n * The initialize event is also fired in case of an update. The rich client only know\r\n * one event. We distinguish then. The onInit event is unregistered after first processing.\r\n * From then on all events are redirected to the update callback. The code inside enrich\r\n * the rich client data as much as possible to be equal to the webclient data.\r\n *\r\n * @param {Object} data initialize data from the rich client.\r\n * @private\r\n */\r\nasync function internalOnInitUpdateDashlet(data) {\r\n\tif (dashletCache === null) {\r\n        dashletCache = {};\r\n        dashletCache.dashletCaption = window.osClient.osjxGetDashletCaption();\r\n        dashletCache.uri = window.osClient.osjxGetDashletURL();\r\n        dashletCache.languageGuiSelected = window.osClient.osjxGetEnvironment(35);\r\n        dashletCache.languageObjectDefinition = window.osClient.osjxGetEnvironment(33);\r\n        dashletCache.wfOrgId = window.osClient.osjxGetEnvironment(19);\r\n        dashletCache.mail = window.osClient.osjxGetEnvironment(16);\r\n        dashletCache.username = window.osClient.osjxGetEnvironment(3);\r\n        dashletCache.groups = window.osClient.osjxGetEnvironment(11);\r\n        dashletCache.fullname = window.osClient.osjxGetEnvironment(14);\r\n    }\r\n\r\n    let selectedEntries = await getSelectedObjects();\r\n    let lastObjectType = {\r\n        mainType: 0,\r\n        objectType: \"UNKNOWN\"\r\n    };\r\n\r\n    if (selectedEntries == null || selectedEntries.length === 0 || selectedEntries[0].objectId === \"\" || selectedEntries[0].objectId === void 0) {\r\n        // On opening an index data mask for a different ECM object out of the dashlet the selectedEntries has one element\r\n        // but the objectId and objectTypeId are empty. We fix this by assigning the information from the init event.\r\n        selectedEntries = [{\r\n            objectId: data.objectident,\r\n            objectTypeId: data.objecttype\r\n        }];\r\n    }\r\n\r\n    // For search masks we have a selected object with objectId zero. There isn't a selected object.\r\n    if (selectedEntries.length === 1 && selectedEntries[0].objectId === \"0\" && selectedEntries[0].objectTypeId === \"0\") {\r\n        selectedEntries = [];\r\n    }\r\n\r\n    for (const selectedEntry of selectedEntries) {\r\n        addObjectTypeAndMainType(selectedEntry);\r\n\r\n        if (selectedEntry.objectId === data.objectident) {\r\n            lastObjectType = selectedEntry;\r\n        }\r\n    }\r\n\r\n    // get base url\r\n    if (typeof location.origin === 'undefined') {\r\n        location.origin = location.protocol + '//' + location.host;\r\n    }\r\n\r\n    // map data for webClient structure\r\n    const mappedData= {\r\n        activeCustomDashlet: {\r\n            objectTypes: null, // no information from enaio rich client\r\n            platforms: null, // no information from enaio rich client\r\n            uri: dashletCache.uri,\r\n            title_DE: dashletCache.dashletCaption,\r\n            title_EN: dashletCache.dashletCaption,\r\n            title_FR: dashletCache.dashletCaption,\r\n            iconId: null, // no information from enaio rich client\r\n            users: null, // no information from enaio rich client\r\n            groups: null, // no information from enaio rich client\r\n        },\r\n        lastSelectedEntry: {\r\n            hasVariants: null, // no information from enaio rich client\r\n            mainType: lastObjectType.mainType,\r\n            objectTypeId: data.objecttype,\r\n            osid: data.objectident,\r\n            objectType: lastObjectType.objectType\r\n        },\r\n        osDashletInit: {\r\n            objectident: data.objectident,\r\n            objecttype: data.objecttype,\r\n            userid: data.userid,\r\n            userguid: data.userguid,\r\n            sessionguid: data.sessionguid,\r\n            regenerate: data.regenerate,\r\n            pagecount: data.pagecount,\r\n            searchterm: data.searchterm\r\n        },\r\n        selectedEntries: selectedEntries.map(selectedEntry => ({\r\n            osid: selectedEntry.objectId,\r\n            objectTypeId: selectedEntry.objectTypeId,\r\n            objectType: selectedEntry.objectType,\r\n            mainType: selectedEntry.mainType\r\n        })),\r\n        sessionInfo: {\r\n            language: dashletCache.languageGuiSelected.substring(0, 2), // only \"fr\" instead of \"fra\"\r\n            languageObjectDefinition: dashletCache.languageObjectDefinition.split(\"_\")[0], // only \"de\" instead of \"de_DE\"\r\n            sessionGuid: data.sessionguid,\r\n            clientType: \"rich_client\",\r\n            baseUrl: location.origin\r\n        },\r\n        userInfo: {\r\n            email: dashletCache.mail,\r\n            fullname: dashletCache.fullname,\r\n            groups: dashletCache.groups.split(\";\"),\r\n            name: dashletCache.username,\r\n            osGuid: data.userguid,\r\n            userId: data.userid,\r\n            wfGuid: null, // no information from enaio rich client\r\n            wfOrdId: dashletCache.wfOrgId\r\n        },\r\n        context: null\r\n    }\r\n    console.log(\"🚀 ~ internalOnInitUpdateDashlet ~ mappedData:\", mappedData)\r\n\r\n    // execute registered events with mapped data.\r\n\t// onInitCallback is called once. Afterward we set it to null and then onUpdateCallback is called.\r\n    if (onInitCallback != null) {\r\n        onInitCallback(mappedData);\r\n        onInitCallback = null;\r\n    } else if (onUpdateCallback != null) {\r\n        onUpdateCallback(mappedData);\r\n    }\r\n}\r\n\r\n/**\r\n * Handle the onInit event for modal dialogs and call a callback function if one is registered.\r\n *\r\n * @param {Object} data initialize data from the rich client.\r\n * @private\r\n */\r\nfunction internalOnInitModalDialog(data) {\r\n\tif (onInitCallback != null) {\r\n        onInitCallback(data);\r\n        onInitCallback = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Embed a function to the html file as the rich client looks up for a function\r\n * named osDashletInit in it. For this example we find that this is a clean solution\r\n * instead of placing it directly into the html file.\r\n *\r\n * @private\r\n */\r\nfunction registerOnInitUpdate() {\r\n    window.internalOnInitUpdate = internalOnInitUpdate;\r\n\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.innerText = \"function osDashletInit(data) { window.internalOnInitUpdate(data); } function onInit(data) { window.internalOnInitUpdate(data); }\";\r\n\r\n    document.getElementsByTagName('head')[0].appendChild(script);\r\n}\r\n\r\n/**\r\n * Call the method directly to register ourselves directly on the window object.\r\n * A addEventListener(\"load\", registerOnInitUpdate); would be nicer, but it is too late.\r\n * Then we miss the rich client call which we want to intercept.\r\n */\r\nregisterOnInitUpdate();\r\n\r\n/**\r\n * Entry method for sending commands to the rich client. The payload is the one for enaio web client.\r\n * It must be converted before sending it to rich client and the response must also be converted back.\r\n * This method is async even if the method is synchronous. It must be compatible to web client implementation.\r\n * and the web client is async an\r\n *\r\n * @param {*} payload web client format\r\n * @returns response in web client format\r\n */\r\nasync function sendToRichClient(payload) {\r\n    switch (payload[0]) {\r\n        case \"openIndexData\": \t\t\treturn openIndexData(payload);\r\n        case \"openLocation\":  \t\t\treturn openLocation(payload);\r\n        case \"getSelectedObjects\":\t\treturn getSelectedObjects(payload);\r\n        case \"refreshHitListObjects\": \treturn refreshHitListObjects(payload);\r\n        case \"openHitListByIds\":      \treturn openHitListByIds(payload);\r\n        case \"getFieldValueByInternal\": return getFieldValueByInternal(payload);\r\n\t\tcase \"setFieldValueByInternal\": return setFieldValueByInternal(payload);\r\n\t\tcase \"setWorkflowVariableByName\": return setWorkflowVariableByName(payload);\r\n\t\tcase \"getEnvironment\":\t\t\treturn getEnvironment();\r\n        case \"closeModalDialog\":        return closeModalDialog(payload);\r\n        case \"setDialogCaption\":        return setDialogCaption(payload);\r\n        case \"getWorkflowVariableByName\": return getWorkflowVariableByName(payload);\r\n    }\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function openLocation(payload) {\r\n    // const inNewTab = payload[1][0]; // Only as reminder but not supported by the rich client.\r\n    const osId = Number(payload[1][1]);\r\n    const objectTypeId = Number(payload[1][2]);\r\n\r\n    if ((objectTypeId >>> 16) === 0) {\r\n        await window.osClient.osjxOpenObject(osId);\r\n    } else {\r\n        await window.osClient.osjxOpenLocation(osId);\r\n    }\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function openIndexData(payload) {\r\n    // const inNewTab = payload[1][0]; // Only as reminder but not supported by the rich client.\r\n    const osId = Number(payload[1][2]);\r\n    const readonly = payload[1][1].toLowerCase() === \"view\";\r\n\r\n    await window.osClient.osjxOpenDataSheet(osId, readonly);\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function getSelectedObjects() {\r\n    const selectedObjects = await window.osClient.osjxGetSelectedObjects();\r\n    return selectedObjects.split(\";\").map(selectedObject => {\r\n        const split = selectedObject.split(\",\");\r\n        const retVal = {\r\n            objectId: split[0],\r\n            objectTypeId: split[1]\r\n        };\r\n        addObjectTypeAndMainType(retVal);\r\n        return retVal;\r\n    });\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function refreshHitListObjects(payload) {\r\n    for (const objectToRefresh of payload[1]) {\r\n        const osId = Number(objectToRefresh[0]);\r\n        await window.osClient.osjxRefreshObjectInLists(osId);\r\n    }\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function openHitListByIds(payload) {\r\n    const ids = payload[1].objects;\r\n    const title = payload[1].title.length === 0 ? \"Gemischte Trefferliste\" : payload[1].title;\r\n\r\n    const request = {\r\n        title,\r\n        hits: ids.map(hit => ({id: hit.objectId, type: hit.objectTypeId}))\r\n    };\r\n\r\n    await window.osClient.osjxOpenResultList(JSON.stringify(request));\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function getFieldValueByInternal(payload) {\r\n\treturn JSON.parse(await window.osClient.getFieldValueByInternal(payload[1][0]));\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function setFieldValueByInternal(payload) {\r\n\treturn JSON.parse(await window.osClient.setFieldValueByInternal(payload[1][0]));\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function setWorkflowVariableByName(payload) {\r\n\treturn JSON.parse(await window.osClient.setWorkflowVariableByName(payload[1][0]));\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function getEnvironment() {\r\n\treturn JSON.parse(await window.osClient.getEnvironment());\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function closeModalDialog(payload) {\r\n    await window.osClient.closeModalDialog(payload[1][0]);\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function setDialogCaption(payload) {\r\n    return window.osClient.setDialogCaption(payload[1][0]);\r\n}\r\n\r\n/**\r\n * Documentation see communication-library.js\r\n *\r\n * @private\r\n */\r\nasync function getWorkflowVariableByName(payload) {\r\n\treturn JSON.parse(await window.osClient.getWorkflowVariableByName(payload[1][0]));\r\n}\r\n\r\n/**\r\n * Calculate the mainType and objectType from objectTypeId and add the properties to the\r\n * hand in object.\r\n *\r\n * @param selectedObject The object to extend\r\n */\r\nfunction addObjectTypeAndMainType(selectedObject) {\r\n    // In WebClient it is a string. Therefore toString();\r\n    selectedObject.mainType = (selectedObject.objectTypeId >>> 16).toString();\r\n\r\n    switch (selectedObject.mainType) {\r\n        case \"0\": selectedObject.objectType = \"FOLDER\"; break;\r\n        case \"99\": selectedObject.objectType = \"REGISTER\"; break;\r\n        default: selectedObject.objectType = \"DOCUMENT\"; break;\r\n    }\r\n}\r\n\r\n/**\r\n * Return true if we are running inside a modal dialog. If we are running inside a dashlet the return is false.\r\n */\r\nfunction isModalDialog() {\r\n    return modalDialog;\r\n}\r\n\r\n/**\r\n * This function is only for the unit-tests to reset the rich client library to its original state\r\n */\r\nfunction reset() {\r\n    modalDialog = false;\r\n    onInitCallback = () => {};\r\n    onUpdateCallback = () => {};\r\n    dashletCache = null;\r\n\r\n    delete window.osClient;\r\n}\r\n\r\n// Export functions to be used in other JavaScript files.\r\n// Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\r\nexport {\r\n\tregisterOnInitCallback, \r\n\tregisterOnUpdateCallback, \r\n\tsendToRichClient,\r\n\tisModalDialog,\r\n\r\n    // Only for Unit-Tests\r\n    registerOnInitUpdate,\t\r\n    reset\r\n};\r\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}